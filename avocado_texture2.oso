OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: 
shader avocado_texture2
param	float	Kd	0.800000012		%read{30,30} %write{2147483647,-1}
param	float	Ks	0.200000003		%read{14,31} %write{2147483647,-1}
param	float	roughness	0.100000001		%read{35,39} %write{2147483647,-1}
param	float	noise_scale	0.200000003		%read{3,25} %write{2147483647,-1}
param	string	envmap	""		%read{2147483647,-1} %write{2147483647,-1}
param	string	color_texture	""		%read{10,12} %write{2147483647,-1}
param	string	spec_texture	""		%read{15,17} %write{2147483647,-1}
param	string	norm_texture	""		%read{19,21} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%read{2147483647,-1} %write{38,38}
oparam	float	resultF	0		%read{2147483647,-1} %write{39,39}
global	point	P	%read{3,3} %write{2147483647,-1}
global	vector	I	%read{28,28} %write{2147483647,-1}
global	normal	N	%read{18,18} %write{2147483647,-1}
global	float	u	%read{0,0} %write{2147483647,-1} %derivs
global	float	v	%read{1,1} %write{2147483647,-1} %derivs
local	float	s	%read{12,21} %write{0,0} %derivs
local	float	t	%read{12,21} %write{1,1} %derivs
local	color	base_color	%read{6,30} %write{2,13}
local	float	imperfection_noise	%read{7,7} %write{5,5}
local	float	imperfection_blend	%read{9,9} %write{7,7}
local	color	imperfection_color	%read{9,9} %write{8,8}
local	color	___325_texture_color	%read{13,13} %write{12,12}
local	color	spec_color	%read{31,31} %write{14,17}
local	normal	n	%read{26,33} %write{18,27}
local	normal	___327_n_map	%read{25,25} %write{24,24}
local	vector	incident	%read{32,32} %write{29,29}
local	color	diffuse_color	%read{38,38} %write{30,30}
local	color	specular_color	%read{38,38} %write{37,37}
const	color	$const1	0.400000006 0.200000003 0		%read{2,2} %write{2147483647,-1}
temp	point	$tmp1	%read{4,4} %write{3,3}
temp	point	$tmp2	%read{5,5} %write{4,4}
const	float	$const3	100		%read{4,4} %write{2147483647,-1}
const	color	$const4	0.200000003 0.300000012 0		%read{6,6} %write{2147483647,-1}
const	float	$const5	0.100000001		%read{7,7} %write{2147483647,-1}
const	float	$const6	0.800000012		%read{7,7} %write{2147483647,-1}
const	color	$const7	0.200000003 0.200000003 0		%read{8,8} %write{2147483647,-1}
const	string	$const8	""		%read{10,19} %write{2147483647,-1}
temp	int	$tmp4	%read{11,11} %write{10,10}
const	float	$const9	0.300000012		%read{13,13} %write{2147483647,-1}
temp	int	$tmp5	%read{16,16} %write{15,15}
temp	int	$tmp6	%read{20,20} %write{19,19}
temp	vector	$tmp7	%read{22,22} %write{21,21}
const	float	$const10	2		%read{22,22} %write{2147483647,-1}
temp	vector	$tmp8	%read{23,23} %write{22,22}
const	float	$const11	1		%read{23,39} %write{2147483647,-1}
temp	vector	$tmp9	%read{24,24} %write{23,23}
temp	normal	$tmp10	%read{26,26} %write{25,25}
temp	normal	$tmp11	%read{27,27} %write{26,26}
temp	vector	$tmp12	%read{29,29} %write{28,28}
temp	color	$tmp13	%read{37,37} %write{31,31}
temp	float	$tmp14	%read{37,37} %write{36,36}
temp	float	$tmp15	%read{36,36} %write{34,34}
const	float	$const13	0		%read{34,34} %write{2147483647,-1}
temp	float	$tmp16	%read{34,34} %write{33,33}
temp	vector	$tmp17	%read{33,33} %write{32,32}
temp	float	$tmp18	%read{36,36} %write{35,35}
code ___main___
# surface_shader1.osl:15
#     float s = u;
	assign		s u 	%filename{"surface_shader1.osl"} %line{15} %argrw{"wr"}
# surface_shader1.osl:16
#     float t = v;
	assign		t v 	%line{16} %argrw{"wr"}
# surface_shader1.osl:19
#     color base_color = color(0.4, 0.2, 0.0);
	assign		base_color $const1 	%line{19} %argrw{"wr"}
# surface_shader1.osl:22
#     float imperfection_noise = noise(P * noise_scale * 100);
	mul		$tmp1 P noise_scale 	%line{22} %argrw{"wrr"}
	mul		$tmp2 $tmp1 $const3 	%argrw{"wrr"}
	noise		imperfection_noise $tmp2 	%argrw{"wr"}
# surface_shader1.osl:25
#     base_color *= color(0.2, 0.3, 0.0); // Darker and more brownish green
	mul		base_color base_color $const4 	%line{25} %argrw{"wrr"}
# surface_shader1.osl:28
#     float imperfection_blend = smoothstep(0.1, 0.8, imperfection_noise); // Smooth blending factor
	smoothstep	imperfection_blend $const5 $const6 imperfection_noise 	%line{28} %argrw{"wrrr"}
# surface_shader1.osl:29
#     color imperfection_color = color(0.2, 0.2, 0.0); // Color for imperfections
	assign		imperfection_color $const7 	%line{29} %argrw{"wr"}
# surface_shader1.osl:30
#     base_color = mix(base_color, imperfection_color, imperfection_blend);
	mix		base_color base_color imperfection_color imperfection_blend 	%line{30} %argrw{"wrrr"}
# surface_shader1.osl:33
#     if (color_texture != "") {
	neq		$tmp4 color_texture $const8 	%line{33} %argrw{"wrr"}
	if		$tmp4 14 14 	%argrw{"r"}
# surface_shader1.osl:34
#         color texture_color = texture(color_texture, s, t);
	texture		___325_texture_color color_texture s t 	%line{34} %argrw{"wrrr"} %argderivs{2,3}
# surface_shader1.osl:35
#         base_color = mix(base_color, texture_color, 0.3); // Mix texture color with base color
	mix		base_color base_color ___325_texture_color $const9 	%line{35} %argrw{"wrrr"}
# surface_shader1.osl:39
#     color spec_color = color(Ks);
	assign		spec_color Ks 	%line{39} %argrw{"wr"}
# surface_shader1.osl:40
#     if (spec_texture != "") {
	neq		$tmp5 spec_texture $const8 	%line{40} %argrw{"wrr"}
	if		$tmp5 18 18 	%argrw{"r"}
# surface_shader1.osl:41
#         spec_color = texture(spec_texture, s, t);
	texture		spec_color spec_texture s t 	%line{41} %argrw{"wrrr"} %argderivs{2,3}
# surface_shader1.osl:45
#     normal n = normalize(N);
	normalize	n N 	%line{45} %argrw{"wr"}
# surface_shader1.osl:46
#     if (norm_texture != "") {
	neq		$tmp6 norm_texture $const8 	%line{46} %argrw{"wrr"}
	if		$tmp6 28 28 	%argrw{"r"}
# surface_shader1.osl:47
#         normal n_map = normalize(texture(norm_texture, s, t) * 2.0 - 1.0);
	texture		$tmp7 norm_texture s t 	%line{47} %argrw{"wrrr"} %argderivs{2,3}
	mul		$tmp8 $tmp7 $const10 	%argrw{"wrr"}
	sub		$tmp9 $tmp8 $const11 	%argrw{"wrr"}
	normalize	___327_n_map $tmp9 	%argrw{"wr"}
# surface_shader1.osl:48
#         n = normalize(n + n_map * noise_scale); // Combine with procedural noise
	mul		$tmp10 ___327_n_map noise_scale 	%line{48} %argrw{"wrr"}
	add		$tmp11 n $tmp10 	%argrw{"wrr"}
	normalize	n $tmp11 	%argrw{"wr"}
# surface_shader1.osl:52
#     vector incident = normalize(-I);
	neg		$tmp12 I 	%line{52} %argrw{"wr"}
	normalize	incident $tmp12 	%argrw{"wr"}
# surface_shader1.osl:53
#     color diffuse_color = base_color * Kd;
	mul		diffuse_color base_color Kd 	%line{53} %argrw{"wrr"}
# surface_shader1.osl:54
#     color specular_color = spec_color * Ks * pow(max(0, dot(normalize(incident), n)), 1.0 / roughness);
	mul		$tmp13 spec_color Ks 	%line{54} %argrw{"wrr"}
	normalize	$tmp17 incident 	%argrw{"wr"}
	dot		$tmp16 $tmp17 n 	%argrw{"wrr"}
	max		$tmp15 $const13 $tmp16 	%argrw{"wrr"}
	div		$tmp18 $const11 roughness 	%argrw{"wrr"}
	pow		$tmp14 $tmp15 $tmp18 	%argrw{"wrr"}
	mul		specular_color $tmp13 $tmp14 	%argrw{"wrr"}
# surface_shader1.osl:59
#     resultRGB = diffuse_color + specular_color;
	add		resultRGB diffuse_color specular_color 	%line{59} %argrw{"wrr"}
# surface_shader1.osl:60
#     resultF = 1.0 - roughness;
	sub		resultF $const11 roughness 	%line{60} %argrw{"wrr"}
	end
