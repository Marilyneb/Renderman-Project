OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: 
shader avocado_displacement
param	float	scale	1		%read{8,11} %write{2147483647,-1}
param	float	frequency	25		%read{14,28} %write{2147483647,-1}
param	float	amplitude	0.0500000007		%read{15,15} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%read{2147483647,-1} %write{35,35}
oparam	float	resultF	0		%read{2147483647,-1} %write{27,27}
global	point	P	%read{0,28} %write{2147483647,-1}
local	float	x	%read{6,6} %write{2,2}
local	float	y	%read{9,9} %write{5,5}
local	float	avocado_disp_x	%read{12,12} %write{8,8}
local	float	avocado_disp_y	%read{12,12} %write{11,11}
local	float	final_disp	%read{27,27} %write{12,12}
local	float	noise_val	%read{18,27} %write{13,26}
local	float	freq	%read{18,26} %write{14,26}
local	float	amp	%read{18,26} %write{15,26}
local	int	___325_i	%read{18,26} %write{17,26}
local	float	color_noise_val	%read{32,34} %write{31,31}
const	int	$const1	0		%read{0,19} %write{2147483647,-1}
temp	float	$tmp1	%read{1,1} %write{0,0}
const	float	$const2	1		%read{1,10} %write{2147483647,-1}
temp	float	$tmp2	%read{2,2} %write{1,1}
const	float	$const3	0.5		%read{2,33} %write{2147483647,-1}
const	int	$const4	1		%read{3,26} %write{2147483647,-1}
temp	float	$tmp3	%read{4,4} %write{3,3}
temp	float	$tmp4	%read{5,5} %write{4,4}
temp	float	$tmp5	%read{7,7} %write{6,6}
const	float	$const5	1.5		%read{6,6} %write{2147483647,-1}
temp	float	$tmp6	%read{8,8} %write{7,7}
temp	float	$tmp7	%read{10,10} %write{9,9}
const	float	$const6	2		%read{9,24} %write{2147483647,-1}
temp	float	$tmp8	%read{11,11} %write{10,10}
const	float	$const7	0		%read{13,13} %write{2147483647,-1}
const	int	$const8	8		%read{18,18} %write{2147483647,-1}
temp	int	$tmp9	%read{18,26} %write{18,26}
temp	int	$tmp10	%read{16,26} %write{17,26}
temp	float	$tmp11	%read{18,26} %write{18,26}
temp	point	$tmp12	%read{18,26} %write{18,26}
temp	float	$tmp13	%read{18,26} %write{18,26}
temp	float	$tmp14	%read{31,31} %write{30,30}
temp	point	$tmp15	%read{29,29} %write{28,28}
const	float	$const9	0.100000001		%read{29,31} %write{2147483647,-1}
temp	point	$tmp16	%read{30,30} %write{29,29}
const	float	$const10	0.340000004		%read{32,32} %write{2147483647,-1}
temp	float	$tmp17	%read{35,35} %write{32,32}
temp	float	$tmp18	%read{35,35} %write{33,33}
const	float	$const11	0.159999996		%read{34,34} %write{2147483647,-1}
temp	float	$tmp19	%read{35,35} %write{34,34}
code ___main___
# bump_shader.osl:8
#     float x = (P[0] + 1.0) * 0.5;
	compref		$tmp1 P $const1 	%filename{"bump_shader.osl"} %line{8} %argrw{"wrr"}
	add		$tmp2 $tmp1 $const2 	%argrw{"wrr"}
	mul		x $tmp2 $const3 	%argrw{"wrr"}
# bump_shader.osl:9
#     float y = (P[1] + 1.0) * 0.5;
	compref		$tmp3 P $const4 	%line{9} %argrw{"wrr"}
	add		$tmp4 $tmp3 $const2 	%argrw{"wrr"}
	mul		y $tmp4 $const3 	%argrw{"wrr"}
# bump_shader.osl:12
#     float avocado_disp_x = (1.0 - pow(x, 1.5)) * scale;
	pow		$tmp5 x $const5 	%line{12} %argrw{"wrr"}
	sub		$tmp6 $const2 $tmp5 	%argrw{"wrr"}
	mul		avocado_disp_x $tmp6 scale 	%argrw{"wrr"}
# bump_shader.osl:13
#     float avocado_disp_y = (1.0 - pow(y, 2.0)) * scale; 
	pow		$tmp7 y $const6 	%line{13} %argrw{"wrr"}
	sub		$tmp8 $const2 $tmp7 	%argrw{"wrr"}
	mul		avocado_disp_y $tmp8 scale 	%argrw{"wrr"}
# bump_shader.osl:15
#     float final_disp = avocado_disp_x * avocado_disp_y;
	mul		final_disp avocado_disp_x avocado_disp_y 	%line{15} %argrw{"wrr"}
# bump_shader.osl:17
#     float noise_val = 0.0;
	assign		noise_val $const7 	%line{17} %argrw{"wr"}
# bump_shader.osl:18
#     float freq = frequency;
	assign		freq frequency 	%line{18} %argrw{"wr"}
# bump_shader.osl:19
#     float amp = amplitude;
	assign		amp amplitude 	%line{19} %argrw{"wr"}
# bump_shader.osl:20
#     for (int i = 0; i < 8; ++i) {
	for		$tmp10 18 20 26 27 	%line{20} %argrw{"r"}
	assign		___325_i $const1 	%argrw{"wr"}
	lt		$tmp9 ___325_i $const8 	%argrw{"wrr"}
	neq		$tmp10 $tmp9 $const1 	%argrw{"wrr"}
# bump_shader.osl:21
#         noise_val += noise(P * freq) * amp;
	mul		$tmp12 P freq 	%line{21} %argrw{"wrr"}
	noise		$tmp11 $tmp12 	%argrw{"wr"}
	mul		$tmp13 $tmp11 amp 	%argrw{"wrr"}
	add		noise_val noise_val $tmp13 	%argrw{"wrr"}
# bump_shader.osl:22
#         freq *= 2.0;
	mul		freq freq $const6 	%line{22} %argrw{"wrr"}
# bump_shader.osl:23
#         amp *= 0.5;
	mul		amp amp $const3 	%line{23} %argrw{"wrr"}
# bump_shader.osl:20
#     for (int i = 0; i < 8; ++i) {
	add		___325_i ___325_i $const4 	%line{20} %argrw{"wrr"}
# bump_shader.osl:26
#     resultF = final_disp + noise_val;
	add		resultF final_disp noise_val 	%line{26} %argrw{"wrr"}
# bump_shader.osl:28
#     float color_noise_val = noise(P * frequency * 0.1) * 0.1;
	mul		$tmp15 P frequency 	%line{28} %argrw{"wrr"}
	mul		$tmp16 $tmp15 $const9 	%argrw{"wrr"}
	noise		$tmp14 $tmp16 	%argrw{"wr"}
	mul		color_noise_val $tmp14 $const9 	%argrw{"wrr"}
# bump_shader.osl:29
#     resultRGB = color(0.34 + color_noise_val, 0.5 + color_noise_val, 0.16 + color_noise_val);
	add		$tmp17 $const10 color_noise_val 	%line{29} %argrw{"wrr"}
	add		$tmp18 $const3 color_noise_val 	%argrw{"wrr"}
	add		$tmp19 $const11 color_noise_val 	%argrw{"wrr"}
	color		resultRGB $tmp17 $tmp18 $tmp19 	%argrw{"wrrr"}
	end
